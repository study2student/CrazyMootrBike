#pragma once
#include <map>
#include <string>
#include "Resource.h"

class ResourceManager
{

public:

	// リソース名
	enum class SRC
	{
		TITLE,
		PUSH_SPACE,
		SPEECH_BALLOON,
		PLAYER,
		PLAYER_SHADOW,
		SKY_DOME,
		MAIN_PLANET,
		FALL_PLANET,
		FLAT_PLANET_01,
		FLAT_PLANET_02,
		LAST_PLANET,
		SPECIAL_PLANET,
		FOOT_SMOKE,
		WARP_STAR,
		WARP_STAR_ROT_EFF,
		WARP_ORBIT,
		BLACK_HOLE,
		GOAL_STAR,
		CLEAR,
		TANK_BODY,
		TANK_BARREL,
		TANK_WHEEL,

		DEMO_STAGE,//仮ステージ
		JUMP_RAMP,//ジャンプ台
		CURVE,	//カーブ
		CITY,	//背景街並み

		ENEMY_SHORT,		//仮敵
		ENEMY_LONG,
		ENEMY_MAGIC,
		HELICOPTER,
		HELICOPTER_ROTOR,
		BOMB,		//爆弾
		BIKE,		//バイク
		TYRE,		//タイヤ
		BURNOUT_EFFECT, //バーンアウトエフェクト(バイク発車前)

		W_SWORD,//バスターソード

		//エフェクト関連
		HITEFFECT,//ヒットした時のエフェクト
		SONICEFFECT,//ソニックエフェクト

		//サウンド関連
		SND_BGM,//ゲームBGM
		SND_COIN,//コイン収集時の音
		SND_MOTOR//モーター音
	};

	// 明示的にインステンスを生成する
	static void CreateInstance(void);

	// 静的インスタンスの取得
	static ResourceManager& GetInstance(void);

	// 初期化
	void Init(void);

	// 解放(シーン切替時に一旦解放)
	void Release(void);

	// リソースの完全破棄
	void Destroy(void);

	// リソースのロード
	const Resource& Load(SRC src);

	// リソースの複製ロード(モデル用)
	int LoadModelDuplicate(SRC src);

private:

	// 静的インスタンス
	static ResourceManager* instance_;

	// リソース管理の対象
	std::map<SRC, Resource*> resourcesMap_;

	// 読み込み済みリソース
	std::map<SRC, Resource&> loadedMap_;

	Resource dummy_;

	// デフォルトコンストラクタをprivateにして、
	// 外部から生成できない様にする
	ResourceManager(void);
	ResourceManager(const ResourceManager& manager) = default;
	~ResourceManager(void) = default;

	// 内部ロード
	Resource& _Load(SRC src);

};
